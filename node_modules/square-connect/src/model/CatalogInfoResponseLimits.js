/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 */
var ApiClient = require('../ApiClient');




/**
 * The CatalogInfoResponseLimits model module.
 * @module model/CatalogInfoResponseLimits
 */

/**
 * Constructs a new <code>CatalogInfoResponseLimits</code>.
 * 
 * @alias module:model/CatalogInfoResponseLimits
 * @class
 */
var exports = function() {
  var _this = this;












};

/**
 * Constructs a <code>CatalogInfoResponseLimits</code> from a plain JavaScript object, optionally creating a new instance.
 * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
 * @param {Object} data The plain JavaScript object bearing properties of interest.
 * @param {module:model/CatalogInfoResponseLimits} obj Optional instance to populate.
 * @return {module:model/CatalogInfoResponseLimits} The populated <code>CatalogInfoResponseLimits</code> instance.
 */
exports.constructFromObject = function(data, obj) {
  if (data) {
    obj = obj || new exports();

      if (data.hasOwnProperty('batch_upsert_max_objects_per_batch')) {
      obj['batch_upsert_max_objects_per_batch'] = ApiClient.convertToType(data['batch_upsert_max_objects_per_batch'], 'Number');
    }
      if (data.hasOwnProperty('batch_upsert_max_total_objects')) {
      obj['batch_upsert_max_total_objects'] = ApiClient.convertToType(data['batch_upsert_max_total_objects'], 'Number');
    }
      if (data.hasOwnProperty('batch_retrieve_max_object_ids')) {
      obj['batch_retrieve_max_object_ids'] = ApiClient.convertToType(data['batch_retrieve_max_object_ids'], 'Number');
    }
      if (data.hasOwnProperty('search_max_page_limit')) {
      obj['search_max_page_limit'] = ApiClient.convertToType(data['search_max_page_limit'], 'Number');
    }
      if (data.hasOwnProperty('batch_delete_max_object_ids')) {
      obj['batch_delete_max_object_ids'] = ApiClient.convertToType(data['batch_delete_max_object_ids'], 'Number');
    }
      if (data.hasOwnProperty('update_item_taxes_max_item_ids')) {
      obj['update_item_taxes_max_item_ids'] = ApiClient.convertToType(data['update_item_taxes_max_item_ids'], 'Number');
    }
      if (data.hasOwnProperty('update_item_taxes_max_taxes_to_enable')) {
      obj['update_item_taxes_max_taxes_to_enable'] = ApiClient.convertToType(data['update_item_taxes_max_taxes_to_enable'], 'Number');
    }
      if (data.hasOwnProperty('update_item_taxes_max_taxes_to_disable')) {
      obj['update_item_taxes_max_taxes_to_disable'] = ApiClient.convertToType(data['update_item_taxes_max_taxes_to_disable'], 'Number');
    }
      if (data.hasOwnProperty('update_item_modifier_lists_max_item_ids')) {
      obj['update_item_modifier_lists_max_item_ids'] = ApiClient.convertToType(data['update_item_modifier_lists_max_item_ids'], 'Number');
    }
      if (data.hasOwnProperty('update_item_modifier_lists_max_modifier_lists_to_enable')) {
      obj['update_item_modifier_lists_max_modifier_lists_to_enable'] = ApiClient.convertToType(data['update_item_modifier_lists_max_modifier_lists_to_enable'], 'Number');
    }
      if (data.hasOwnProperty('update_item_modifier_lists_max_modifier_lists_to_disable')) {
      obj['update_item_modifier_lists_max_modifier_lists_to_disable'] = ApiClient.convertToType(data['update_item_modifier_lists_max_modifier_lists_to_disable'], 'Number');
    }
    }
  return obj;
}

/**
 * The maximum number of objects that may appear within a single batch in a `/v2/catalog/batch-upsert` request.
 * @member {Number} batch_upsert_max_objects_per_batch
 */
exports.prototype['batch_upsert_max_objects_per_batch'] = undefined;
/**
 * The maximum number of objects that may appear across all batches in a `/v2/catalog/batch-upsert` request.
 * @member {Number} batch_upsert_max_total_objects
 */
exports.prototype['batch_upsert_max_total_objects'] = undefined;
/**
 * The maximum number of object IDs that may appear in a `/v2/catalog/batch-retrieve` request.
 * @member {Number} batch_retrieve_max_object_ids
 */
exports.prototype['batch_retrieve_max_object_ids'] = undefined;
/**
 * The maximum number of results that may be returned in a page of a `/v2/catalog/search` response.
 * @member {Number} search_max_page_limit
 */
exports.prototype['search_max_page_limit'] = undefined;
/**
 * The maximum number of object IDs that may be included in a single `/v2/catalog/batch-delete` request.
 * @member {Number} batch_delete_max_object_ids
 */
exports.prototype['batch_delete_max_object_ids'] = undefined;
/**
 * The maximum number of item IDs that may be included in a single `/v2/catalog/update-item-taxes` request.
 * @member {Number} update_item_taxes_max_item_ids
 */
exports.prototype['update_item_taxes_max_item_ids'] = undefined;
/**
 * The maximum number of tax IDs to be enabled that may be included in a single `/v2/catalog/update-item-taxes` request.
 * @member {Number} update_item_taxes_max_taxes_to_enable
 */
exports.prototype['update_item_taxes_max_taxes_to_enable'] = undefined;
/**
 * The maximum number of tax IDs to be disabled that may be included in a single `/v2/catalog/update-item-taxes` request.
 * @member {Number} update_item_taxes_max_taxes_to_disable
 */
exports.prototype['update_item_taxes_max_taxes_to_disable'] = undefined;
/**
 * The maximum number of item IDs that may be included in a single `/v2/catalog/update-item-modifier-lists` request.
 * @member {Number} update_item_modifier_lists_max_item_ids
 */
exports.prototype['update_item_modifier_lists_max_item_ids'] = undefined;
/**
 * The maximum number of modifier list IDs to be enabled that may be included in a single `/v2/catalog/update-item-modifier-lists` request.
 * @member {Number} update_item_modifier_lists_max_modifier_lists_to_enable
 */
exports.prototype['update_item_modifier_lists_max_modifier_lists_to_enable'] = undefined;
/**
 * The maximum number of modifier list IDs to be disabled that may be included in a single `/v2/catalog/update-item-modifier-lists` request.
 * @member {Number} update_item_modifier_lists_max_modifier_lists_to_disable
 */
exports.prototype['update_item_modifier_lists_max_modifier_lists_to_disable'] = undefined;



module.exports = exports;



