/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 */
var ApiClient = require('../ApiClient');




/**
 * The V1Employee model module.
 * @module model/V1Employee
 */

/**
 * Constructs a new <code>V1Employee</code>.
 * Represents one of a business&#39;s employees.
 * @alias module:model/V1Employee
 * @class
 * @param firstName {String} The employee's first name.
 * @param lastName {String} The employee's last name.
 */
var exports = function(firstName, lastName) {
  var _this = this;


  _this['first_name'] = firstName;
  _this['last_name'] = lastName;







};

/**
 * Constructs a <code>V1Employee</code> from a plain JavaScript object, optionally creating a new instance.
 * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
 * @param {Object} data The plain JavaScript object bearing properties of interest.
 * @param {module:model/V1Employee} obj Optional instance to populate.
 * @return {module:model/V1Employee} The populated <code>V1Employee</code> instance.
 */
exports.constructFromObject = function(data, obj) {
  if (data) {
    obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
      obj['id'] = ApiClient.convertToType(data['id'], 'String');
    }
      if (data.hasOwnProperty('first_name')) {
      obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
    }
      if (data.hasOwnProperty('last_name')) {
      obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
    }
      if (data.hasOwnProperty('role_ids')) {
      obj['role_ids'] = ApiClient.convertToType(data['role_ids'], ['String']);
    }
      if (data.hasOwnProperty('authorized_location_ids')) {
      obj['authorized_location_ids'] = ApiClient.convertToType(data['authorized_location_ids'], ['String']);
    }
      if (data.hasOwnProperty('email')) {
      obj['email'] = ApiClient.convertToType(data['email'], 'String');
    }
      if (data.hasOwnProperty('status')) {
      obj['status'] = ApiClient.convertToType(data['status'], 'String');
    }
      if (data.hasOwnProperty('external_id')) {
      obj['external_id'] = ApiClient.convertToType(data['external_id'], 'String');
    }
      if (data.hasOwnProperty('created_at')) {
      obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
    }
      if (data.hasOwnProperty('updated_at')) {
      obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
    }
    }
  return obj;
}

/**
 * The employee's unique ID.
 * @member {String} id
 */
exports.prototype['id'] = undefined;
/**
 * The employee's first name.
 * @member {String} first_name
 */
exports.prototype['first_name'] = undefined;
/**
 * The employee's last name.
 * @member {String} last_name
 */
exports.prototype['last_name'] = undefined;
/**
 * The ids of the employee's associated roles. Currently, you can specify only one or zero roles per employee.
 * @member {Array.<String>} role_ids
 */
exports.prototype['role_ids'] = undefined;
/**
 * The IDs of the locations the employee is allowed to clock in at.
 * @member {Array.<String>} authorized_location_ids
 */
exports.prototype['authorized_location_ids'] = undefined;
/**
 * The employee's email address.
 * @member {String} email
 */
exports.prototype['email'] = undefined;
/**
 * CWhether the employee is ACTIVE or INACTIVE. Inactive employees cannot sign in to Square Register.Merchants update this field from the Square Dashboard. See [V1EmployeeStatus](#type-v1employeestatus) for possible values
 * @member {String} status
 */
exports.prototype['status'] = undefined;
/**
 * An ID the merchant can set to associate the employee with an entity in another system.
 * @member {String} external_id
 */
exports.prototype['external_id'] = undefined;
/**
 * The time when the employee entity was created, in ISO 8601 format.
 * @member {String} created_at
 */
exports.prototype['created_at'] = undefined;
/**
 * The time when the employee entity was most recently updated, in ISO 8601 format.
 * @member {String} updated_at
 */
exports.prototype['updated_at'] = undefined;



module.exports = exports;



